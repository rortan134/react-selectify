import * as React from "react";
import { type NextPage } from "next";
import Head from "next/head";
import Header from "./Header";
import Link from "next/link";

import { cva } from "class-variance-authority";
import { useSelectify } from "use-selectify";

type BlockTypes = "h1" | "h2" | "h3" | "paragraph";

const blockVariants = cva(
  "group relative w-full max-w-full whitespace-pre-wrap rounded-md px-0.5 py-1 text-slate-800 caret-slate-900 flex items-start",
  {
    variants: {
      type: {
        h1: "text-4xl font-semibold mt-6",
        h2: "text-3xl font-semibold mt-4",
        h3: "text-2xl font-semibold mt-4",
        paragraph: "text-lg font-normal mt-2",
      },
    },
  }
);

const Block = ({
  type,
  children,
}: {
  type: BlockTypes;
  children: React.ReactNode;
}) => {
  return (
    <div
      data-block
      data-selected="false"
      contentEditable="true"
      className={blockVariants({ type })}
    >
      {children}
      <div className="pointer-events-none absolute inset-0 opacity-0 transition-opacity group-data-[selected='true']:bg-[#2382e2]/10 group-data-[selected='true']:opacity-100" />
      <div className="absolute -left-8 top-2 h-full cursor-grab items-center justify-center opacity-0 transition-opacity data-[block]:hover:opacity-100">
        <svg
          viewBox="0 0 10 10"
          className="flex w-6 rounded-md fill-slate-800/50 p-1.5 transition-colors hover:bg-slate-100"
        >
          <path d="M3,2 C2.44771525,2 2,1.55228475 2,1 C2,0.44771525 2.44771525,0 3,0 C3.55228475,0 4,0.44771525 4,1 C4,1.55228475 3.55228475,2 3,2 Z M3,6 C2.44771525,6 2,5.55228475 2,5 C2,4.44771525 2.44771525,4 3,4 C3.55228475,4 4,4.44771525 4,5 C4,5.55228475 3.55228475,6 3,6 Z M3,10 C2.44771525,10 2,9.55228475 2,9 C2,8.44771525 2.44771525,8 3,8 C3.55228475,8 4,8.44771525 4,9 C4,9.55228475 3.55228475,10 3,10 Z M7,2 C6.44771525,2 6,1.55228475 6,1 C6,0.44771525 6.44771525,0 7,0 C7.55228475,0 8,0.44771525 8,1 C8,1.55228475 7.55228475,2 7,2 Z M7,6 C6.44771525,6 6,5.55228475 6,5 C6,4.44771525 6.44771525,4 7,4 C7.55228475,4 8,4.44771525 8,5 C8,5.55228475 7.55228475,6 7,6 Z M7,10 C6.44771525,10 6,9.55228475 6,9 C6,8.44771525 6.44771525,8 7,8 C7.55228475,8 8,8.44771525 8,9 C8,9.55228475 7.55228475,10 7,10 Z"></path>
        </svg>
      </div>
      <div className="absolute -left-16 top-2 h-full cursor-pointer items-center justify-center opacity-0 transition-opacity data-[block]:hover:opacity-100">
        <svg
          viewBox="0 0 16 16"
          className="block w-6 rounded-md fill-slate-800/50 p-1 transition-colors hover:bg-slate-100"
        >
          <path d="M7.977 14.963c.407 0 .747-.324.747-.723V8.72h5.362c.399 0 .74-.34.74-.747a.746.746 0 00-.74-.738H8.724V1.706c0-.398-.34-.722-.747-.722a.732.732 0 00-.739.722v5.529h-5.37a.746.746 0 00-.74.738c0 .407.341.747.74.747h5.37v5.52c0 .399.332.723.739.723z"></path>
        </svg>
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  const selectionContainerRef = React.useRef(null);
  const { SelectBoxOutlet } = useSelectify(selectionContainerRef, {
    selectCriteria: "[data-block]",
    onSelect: (el) => {
      el.setAttribute("data-selected", "true");
      el.classList.add("select-none");
    },
    onUnselect: (el) => {
      el.removeAttribute("data-selected");
      el.classList.remove("select-none");
    },
  });

  return (
    <>
      <Head>
        <title>use-selectify notion demo</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div ref={selectionContainerRef} className="group relative w-full">
        <Header />
        <section className="flex min-h-screen w-full flex-shrink-0 justify-center">
          <div className="w-[900px] min-w-0 max-w-full">
            <div
              contentEditable="true"
              suppressContentEditableWarning={true}
              className="flex w-full flex-col items-start px-24 pb-60 pt-8"
            >
              <Block type="paragraph">
                <div className="flex w-full items-center space-x-4 rounded-md bg-[#f1f1ef] p-3 pl-4">
                  <div
                    className="cursor-pointer rounded-md px-3 py-1 hover:bg-slate-300/50"
                    contentEditable="false"
                  >
                    ❗
                  </div>
                  <span>
                    Example created only for demonstration purposes. It is not
                    intended to add/remove blocks.
                  </span>
                </div>
              </Block>
              <Block type="paragraph">
                The selection box is completely managed by use-selectify. Try
                drag-selecting some items.
              </Block>
              <Block type="h1">Why use-selectify</Block>
              <Block type="paragraph">
                use-selectify is a React selection box library created out of
                need and designed to be production-ready and blazingly fast. It
                provides an accessible approach to managing selection of
                elements in a React application with a useSelectify hook. This
                hook will return an array of all elements that have been
                selected by a specified ref, which can be used for further
                processing or to render the selected elements on the page.
              </Block>
              <Block type="h2">Introduction</Block>
              <Block type="paragraph">
                Drag interactions are one of the most challenging aspects of the
                web. Having full control of the exact behavior of those
                interactions is essential, yet most available libraries out
                there feel like they are still not up to the task.
              </Block>
              <Block type="paragraph">
                Recognizing this need, use-selectify is a robust React element
                selection library that aims to address these issues and provide
                a powerful starting point for drag interactions while still
                being an accessible approach to managing both visual and logical
                selection of elements in a React application with a hook.
              </Block>
              <Block type="h2">Features</Block>
              <Block type="paragraph">✅ Automatic Window Scrolling</Block>
              <Block type="paragraph">
                ✅ Flexible and Lightweight (3kB gzipped)
              </Block>
              <Block type="paragraph">✅ Accessible by Default</Block>
              <Block type="paragraph">✅ Fine-Grained Control</Block>
              <Block type="paragraph">✅ Simple to Style</Block>
              <Block type="paragraph">✅ Works on mobile</Block>
              <Block type="paragraph">✅ SSR Support</Block>
              <Block type="h2">Installation</Block>
              <Block type="paragraph">
                <div className="flex w-full flex-col rounded-md bg-[#f1f1ef] p-3 pl-4 text-base font-medium">
                  <span>$ npm i use-selectify</span>
                  <span>or</span>
                  <span>$ yarn add use-selectify</span>
                </div>
              </Block>
              <Block type="paragraph">
                <a
                  href="https://github.com/rortan134/use-selectify#readme"
                  className="cursor-pointer text-blue-500 underline-offset-4 hover:underline"
                >
                  Getting Started
                </a>
              </Block>
            </div>
          </div>
          <SelectBoxOutlet
            style={{ backgroundColor: "rgb(191 219 254 / 0.25)" }}
          />
        </section>
      </div>
    </>
  );
};

export default Home;
